slither MiniMeToken.sol 

Compilation warnings/errors on MiniMeToken.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> MiniMeToken.sol

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> ApproveAndCallFallback.sol

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> Controlled.sol

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> MiniMeTokenFactory.sol

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> TokenController.sol

Warning: Source file does not specify required compiler version! Consider adding "pragma solidity ^0.8.17;"
--> ApproveAndCallFallback.sol

Warning: Source file does not specify required compiler version! Consider adding "pragma solidity ^0.8.17;"
--> MiniMeTokenFactory.sol



MiniMeToken.claimTokens(address) (MiniMeToken.sol#494-504) ignores return value by token.transfer(controller,balance) (MiniMeToken.sol#502)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in MiniMeToken.approve(address,uint256) (MiniMeToken.sol#216-233):
        External calls:
        - require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (MiniMeToken.sol#227)
        State variables written after the call(s):
        - allowed[msg.sender][_spender] = _amount (MiniMeToken.sol#230)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Controlled.changeController(address) (Controlled.sol#14-16) should emit an event for: 
        - controller = _newController (Controlled.sol#15) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Controlled.changeController(address)._newController (Controlled.sol#14) lacks a zero-check on :
                - controller = _newController (Controlled.sol#15)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in MiniMeToken.approve(address,uint256) (MiniMeToken.sol#216-233):
        External calls:
        - require(bool)(TokenController(controller).onApprove(msg.sender,_spender,_amount)) (MiniMeToken.sol#227)
        Event emitted after the call(s):
        - Approval(msg.sender,_spender,_amount) (MiniMeToken.sol#231)
Reentrancy in MiniMeToken.claimTokens(address) (MiniMeToken.sol#494-504):
        External calls:
        - token.transfer(controller,balance) (MiniMeToken.sol#502)
        Event emitted after the call(s):
        - ClaimedTokens(_token,controller,balance) (MiniMeToken.sol#503)
Reentrancy in MiniMeToken.createCloneToken(string,uint8,string,uint256,bool) (MiniMeToken.sol#342-364):
        External calls:
        - cloneToken = tokenFactory.createCloneToken(address(address(this)),_snapshotBlock,_cloneTokenName,_cloneDecimalUnits,_cloneTokenSymbol,_transfersEnabled) (MiniMeToken.sol#350-357)
        - cloneToken.changeController(msg.sender) (MiniMeToken.sol#359)
        Event emitted after the call(s):
        - NewCloneToken(address(cloneToken),_snapshotBlock) (MiniMeToken.sol#362)
Reentrancy in MiniMeToken.doTransfer(address,address,uint256) (MiniMeToken.sol#165-202):
        External calls:
        - require(bool)(TokenController(controller).onTransfer(_from,_to,_amount)) (MiniMeToken.sol#186)
        Event emitted after the call(s):
        - Transfer(_from,_to,_amount) (MiniMeToken.sol#200)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

MiniMeToken.isContract(address) (MiniMeToken.sol#464-471) uses assembly
        - INLINE ASM (MiniMeToken.sol#467-469)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Pragma version0.8.17 (Controlled.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.16
Pragma version0.8.17 (MiniMeToken.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.16
Pragma version0.8.17 (TokenController.sol#1) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.16
solc-0.8.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Controlled.changeController(address)._newController (Controlled.sol#14) is not in mixedCase
Parameter MiniMeToken.transfer(address,uint256)._to (MiniMeToken.sol#130) is not in mixedCase
Parameter MiniMeToken.transfer(address,uint256)._amount (MiniMeToken.sol#130) is not in mixedCase
Parameter MiniMeToken.transferFrom(address,address,uint256)._from (MiniMeToken.sol#142) is not in mixedCase
Parameter MiniMeToken.transferFrom(address,address,uint256)._to (MiniMeToken.sol#142) is not in mixedCase
Parameter MiniMeToken.transferFrom(address,address,uint256)._amount (MiniMeToken.sol#142) is not in mixedCase
Parameter MiniMeToken.doTransfer(address,address,uint256)._from (MiniMeToken.sol#165) is not in mixedCase
Parameter MiniMeToken.doTransfer(address,address,uint256)._to (MiniMeToken.sol#165) is not in mixedCase
Parameter MiniMeToken.doTransfer(address,address,uint256)._amount (MiniMeToken.sol#165) is not in mixedCase
Parameter MiniMeToken.balanceOf(address)._owner (MiniMeToken.sol#206) is not in mixedCase
Parameter MiniMeToken.approve(address,uint256)._spender (MiniMeToken.sol#216) is not in mixedCase
Parameter MiniMeToken.approve(address,uint256)._amount (MiniMeToken.sol#216) is not in mixedCase
Parameter MiniMeToken.allowance(address,address)._owner (MiniMeToken.sol#240) is not in mixedCase
Parameter MiniMeToken.allowance(address,address)._spender (MiniMeToken.sol#240) is not in mixedCase
Parameter MiniMeToken.approveAndCall(address,uint256,bytes)._spender (MiniMeToken.sol#252) is not in mixedCase
Parameter MiniMeToken.approveAndCall(address,uint256,bytes)._amount (MiniMeToken.sol#252) is not in mixedCase
Parameter MiniMeToken.approveAndCall(address,uint256,bytes)._extraData (MiniMeToken.sol#252) is not in mixedCase
Parameter MiniMeToken.balanceOfAt(address,uint256)._owner (MiniMeToken.sol#281) is not in mixedCase
Parameter MiniMeToken.balanceOfAt(address,uint256)._blockNumber (MiniMeToken.sol#281) is not in mixedCase
Parameter MiniMeToken.totalSupplyAt(uint256)._blockNumber (MiniMeToken.sol#307) is not in mixedCase
Parameter MiniMeToken.createCloneToken(string,uint8,string,uint256,bool)._cloneTokenName (MiniMeToken.sol#343) is not in mixedCase
Parameter MiniMeToken.createCloneToken(string,uint8,string,uint256,bool)._cloneDecimalUnits (MiniMeToken.sol#344) is not in mixedCase
Parameter MiniMeToken.createCloneToken(string,uint8,string,uint256,bool)._cloneTokenSymbol (MiniMeToken.sol#345) is not in mixedCase
Parameter MiniMeToken.createCloneToken(string,uint8,string,uint256,bool)._snapshotBlock (MiniMeToken.sol#346) is not in mixedCase
Parameter MiniMeToken.createCloneToken(string,uint8,string,uint256,bool)._transfersEnabled (MiniMeToken.sol#347) is not in mixedCase
Parameter MiniMeToken.generateTokens(address,uint256)._owner (MiniMeToken.sol#374) is not in mixedCase
Parameter MiniMeToken.generateTokens(address,uint256)._amount (MiniMeToken.sol#374) is not in mixedCase
Parameter MiniMeToken.destroyTokens(address,uint256)._owner (MiniMeToken.sol#391) is not in mixedCase
Parameter MiniMeToken.destroyTokens(address,uint256)._amount (MiniMeToken.sol#391) is not in mixedCase
Parameter MiniMeToken.enableTransfers(bool)._transfersEnabled (MiniMeToken.sol#410) is not in mixedCase
Parameter MiniMeToken.getValueAt(MiniMeToken.Checkpoint[],uint256)._block (MiniMeToken.sol#422) is not in mixedCase
Parameter MiniMeToken.updateValueAtNow(MiniMeToken.Checkpoint[],uint256)._value (MiniMeToken.sol#449) is not in mixedCase
Parameter MiniMeToken.isContract(address)._addr (MiniMeToken.sol#464) is not in mixedCase
Parameter MiniMeToken.claimTokens(address)._token (MiniMeToken.sol#494) is not in mixedCase
Parameter MiniMeTokenFactory.createCloneToken(address,uint256,string,uint8,string,bool)._parentToken (MiniMeTokenFactory.sol#24) is not in mixedCase
Parameter MiniMeTokenFactory.createCloneToken(address,uint256,string,uint8,string,bool)._snapshotBlock (MiniMeTokenFactory.sol#25) is not in mixedCase
Parameter MiniMeTokenFactory.createCloneToken(address,uint256,string,uint8,string,bool)._tokenName (MiniMeTokenFactory.sol#26) is not in mixedCase
Parameter MiniMeTokenFactory.createCloneToken(address,uint256,string,uint8,string,bool)._decimalUnits (MiniMeTokenFactory.sol#27) is not in mixedCase
Parameter MiniMeTokenFactory.createCloneToken(address,uint256,string,uint8,string,bool)._tokenSymbol (MiniMeTokenFactory.sol#28) is not in mixedCase
Parameter MiniMeTokenFactory.createCloneToken(address,uint256,string,uint8,string,bool)._transfersEnabled (MiniMeTokenFactory.sol#29) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

MiniMeToken.version (MiniMeToken.sol#42) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
